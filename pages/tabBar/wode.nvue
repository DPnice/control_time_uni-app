<template>
	<view>

		<view class="uni-padding-wrap">
			<view style="background-image: url(https://www.dpnice.online/ctimage/bg.png);background-size: cover; padding:40rpx;">
				<block>
					<view style="padding:30rpx 0;margin:auto;text-align:center;">
						<image class="userinfo-avatar" :src="userInfo.avatarUrl"></image>
					</view>
					<view style="margin:auto;text-align:center;">{{userInfo.nickName || userInfo.country}}</view>
				</block>
			</view>

			<view class="uni-btn-v">
				<button class="bottom-login" type="primary" open-type="getUserInfo" @getuserinfo="mpGetUserInfo" v-if="!hasUserInfo">{{isLoginText}}</button>
				<button class="bottom-loginout" type="primary" open-type="getUserInfo" @click="login" v-else>{{isLoginText}}</button>
			</view>
		</view>

		<view v-if="hasUserInfo" class="uni-list">
			<view class="uni-list-cell uni-list-cell-pd">
				<view class="uni-list-cell-db">允许别人查看我的待办</view>
				<switch :checked="userInfo.look == 0" @change="switch1Change" />
			</view>
			<view class="uni-list-cell uni-list-cell-pd">
				<view class="uni-list-cell-db">定时待办提醒(开发中)</view>
				<switch :checked="false" @change="" />
			</view>
		</view>

	</view>
</template>
<script>
	import {
		AppModel
	} from '../../models/app.js'
	const appModel = new AppModel()


	export default {

		data() {
			return {
				hasUserInfo: false,
				userInfo: {},
				userInfoMsg: {},
				isLoginText: "登录"
			}
		},

		onLoad() {

			var u = uni.getStorageSync("userInfo")
			console.log("用户信息", u)
			if (u !== "") {
				this.hasUserInfo = true;
				this.userInfo = u;
				this.isLoginText = "退出";
			} else {
				this.hasUserInfo = false;
				this.isLoginText = "登录";
				this.userInfo = {
					nickName: "未登录",
					avatarUrl: "../../static/touxiang.png"
				};
			}

		},
		methods: {
			updateUser() {
				var userInfo = uni.getStorageSync("userInfo")
				appModel.updateUser(userInfo,
					function(redata) {
						uni.showToast({
							title: "同步成功",
							duration: 500,
							image: "/static/yes.png"
						})
					},
					function(redata) {
						uni.showToast({
							title: "同步失败请重试",
							duration: 500,
							image: "/static/no.png"
						})
					})
			},
			switch1Change: function(e) {
				var userInfo = uni.getStorageSync("userInfo")

				// 更新个人信息
				if (e.detail.value) {
					userInfo.look = "0";
				} else {
					userInfo.look = "1";
				}
				uni.setStorageSync("userInfo", userInfo)
				//网络请求
				this.updateUser()

				console.log('switch1 发生 change 事件，携带值为', e.detail.value)
			},
			mpGetUserInfo(result) {
				var that = this;
				console.log('mpGetUserInfo', result);
				uni.startSoterAuthentication({
					requestAuthModes: ['fingerPrint'],
					challenge: '123456',
					authContent: '请用指纹解锁',
					success(res) {
						if (result.detail.errMsg !== 'getUserInfo:ok') {
							uni.showModal({
								title: '获取用户信息失败',
								content: '错误原因' + result.detail.errMsg,
								showCancel: false
							});
							return;
						}
						that.userInfoMsg = result.detail.userInfo;
						that.login();
					},
					fail(err) {
						if (err.errCode !== 90008 && err.errCode !== 90010) {
							that.userInfoMsg = result.detail.userInfo;
							that.login();
						} else {
							uni.showModal({
								content: '指纹验证失败，errCode：' + err.errCode,
								showCancel: false
							})
						}
					}
				})

			},
			login() {
				if (this.hasUserInfo === true) {
					this.isLoginText = "登录";
					this.hasUserInfo = false;
					this.userInfo = {
						nickName: "未登录",
						avatarUrl: "../../static/touxiang.png"
					};
					//登录信息 置空
					uni.removeStorageSync("userInfo")

				} else {
					var self = this;
					uni.showLoading({
						mask: false,
						title: '正在登录'
					});
					uni.login({
						provider: 'weixin',
						success: function(loginRes) {
							let js_code = loginRes.code;
							console.log("userInfoMsg:", self.userInfoMsg)
							self.userInfoMsg.code = js_code;
							console.log("微信登录:", loginRes)
							appModel.login(self.userInfoMsg, function(redata) {
								self.loading = false
								console.log("登录返回:", redata.data)
								self.hasUserInfo = true;
								self.userInfo = redata.data
								self.isLoginText = "退出";
								uni.setStorageSync("userInfo", self.userInfo)
								uni.hideLoading();
							}, function(redata) {
								uni.hideLoading();
								uni.showToast({
									title: "登录失败",
									duration: 2000,
									image: "/static/no.png"
								})

							});

						},
						fail: function(res) {
							//微信登录失败
							this.isLoginText = "登录";
							uni.hideLoading();
						}
					});

				}
			},
			checkIsSoterEnrolledInDeviceFingerPrint() {

				return uni.checkIsSoterEnrolledInDevice({
					checkAuthMode: 'fingerPrint',
					success(res) {
						if (res.isEnrolled) {
							return true;
						} else {
							return false;
						}

					},
					fail(err) {
						return false;
					}
				})

			},
			startSoterAuthenticationFingerPrint() {
				return uni.startSoterAuthentication({
					requestAuthModes: ['fingerPrint'],
					challenge: '123456',
					authContent: '请用指纹解锁',
					success(res) {
						return true;
					},
					fail(err) {
						uni.showModal({
							content: '指纹验证失败，errCode：' + err.errCode,
							showCancel: false
						})
						return false;
					}
				})
			}

		}
	}
</script>

<style>
	.userinfo-avatar {
		background-color: #FFFFFF;
		border-radius: 128rpx;
		width: 128rpx;
		height: 128rpx;
	}

	.bottom-login {
		border: 0px !important;
		width: 100%;
		height: 80rpx;
		border-radius: 0px !important;
		border: none !important;
	}

	.bottom-loginout {
		border: 0px !important;
		border-radius: 0px !important;
		width: 100%;
		height: 80rpx;
		background-color: #FFFFFF !important;
		color: #555555 !important;
	}

	/* 列表 */
	.uni-list {
		background-color: #FFFFFF;
		position: relative;
		width: 100%;
		display: flex;
		flex-direction: column;
	}

	.uni-list:after {
		position: absolute;
		z-index: 10;
		right: 0;
		bottom: 0;
		left: 0;
		height: 1px;
		content: '';
		-webkit-transform: scaleY(.5);
		transform: scaleY(.5);
		background-color: #c8c7cc;
	}

	.uni-list::before {
		position: absolute;
		z-index: 10;
		right: 0;
		top: 0;
		left: 0;
		height: 1px;
		content: '';
		-webkit-transform: scaleY(.5);
		transform: scaleY(.5);
		background-color: #c8c7cc;
	}

	.uni-list-cell {
		position: relative;
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.uni-list-cell-hover {
		background-color: #eee;
	}

	.uni-list-cell-pd {
		padding: 22rpx 30rpx;
	}

	.uni-list-cell-left {
		white-space: nowrap;
		font-size: 28rpx;
		padding: 0 30rpx;
	}

	.uni-list-cell-db,
	.uni-list-cell-right {
		flex: 1;
	}

	.uni-list-cell::after {
		position: absolute;
		z-index: 3;
		right: 0;
		bottom: 0;
		left: 30rpx;
		height: 1px;
		content: '';
		-webkit-transform: scaleY(.5);
		transform: scaleY(.5);
		background-color: #c8c7cc;
	}

	.uni-list .uni-list-cell:last-child::after {
		height: 0rpx;
	}

	.uni-list-cell-last.uni-list-cell::after {
		height: 0rpx;
	}

	.uni-list-cell-divider {
		position: relative;
		display: flex;
		color: #999;
		background-color: #f7f7f7;
		padding: 15rpx 20rpx;
	}

	.uni-list-cell-divider::before {
		position: absolute;
		right: 0;
		top: 0;
		left: 0;
		height: 1px;
		content: '';
		-webkit-transform: scaleY(.5);
		transform: scaleY(.5);
		background-color: #c8c7cc;
	}

	.uni-list-cell-divider::after {
		position: absolute;
		right: 0;
		bottom: 0;
		left: 0rpx;
		height: 1px;
		content: '';
		-webkit-transform: scaleY(.5);
		transform: scaleY(.5);
		background-color: #c8c7cc;
	}

	.uni-list-cell-navigate {
		font-size: 30rpx;
		padding: 22rpx 30rpx;
		line-height: 48rpx;
		position: relative;
		display: flex;
		box-sizing: border-box;
		width: 100%;
		flex: 1;
		justify-content: space-between;
		align-items: center;
	}

	.uni-list-cell-navigate {
		padding-right: 36rpx;
	}

	.uni-navigate-badge {
		padding-right: 50rpx;
	}

	.uni-list-cell-navigate.uni-navigate-right:after {
		font-family: uniicons;
		content: '\e583';
		position: absolute;
		right: 24rpx;
		top: 50%;
		color: #bbb;
		-webkit-transform: translateY(-50%);
		transform: translateY(-50%);
	}

	.uni-list-cell-navigate.uni-navigate-bottom:after {
		font-family: uniicons;
		content: '\e581';
		position: absolute;
		right: 24rpx;
		top: 50%;
		color: #bbb;
		-webkit-transform: translateY(-50%);
		transform: translateY(-50%);
	}

	.uni-list-cell-navigate.uni-navigate-bottom.uni-active::after {
		font-family: uniicons;
		content: '\e580';
		position: absolute;
		right: 24rpx;
		top: 50%;
		color: #bbb;
		-webkit-transform: translateY(-50%);
		transform: translateY(-50%);
	}

	.uni-collapse.uni-list-cell {
		flex-direction: column;
	}

	.uni-list-cell-navigate.uni-active {
		background: #eee;
	}

	.uni-list.uni-collapse {
		box-sizing: border-box;
		height: 0;
		overflow: hidden;
	}

	.uni-collapse .uni-list-cell {
		padding-left: 20rpx;
	}

	.uni-collapse .uni-list-cell::after {
		left: 52rpx;
	}

	.uni-list.uni-active {
		height: auto;
	}
</style>
